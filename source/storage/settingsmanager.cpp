/*
    settingsmanager.cpp
    Copyright (C) 2012-2013  Micha≈Ç Garapich michal@garapich.pl

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <QtGui>

#include "ui/pages/abstractsettingspage.h"

#include "ui/windows/settingswindow.h"

#include "vatsinatorapplication.h"

#include "settingsmanager.h"
#include "defines.h"

#include "ui/pages/__pagelistheaders.h"
#include "ui/pages/__pagelistcreation.h" // generated by cmake

SettingsManager::SettingsManager(QObject* _parent) :
    QObject(_parent) {}

SettingsManager::~SettingsManager() {
  for (AbstractSettingsPage* p: __pages)
    delete p;
}

void
SettingsManager::init() {
  CREATE_PAGES
  
  for (AbstractSettingsPage* p: __pages)
    SettingsWindow::getSingleton().addPage(p);
  
  connect(SettingsWindow::getSingletonPtr(),    SIGNAL(settingsApplied()),
          this,                                 SLOT(__saveSettings()));
  connect(SettingsWindow::getSingletonPtr(),    SIGNAL(restoreDefaults()),
          this,                                 SLOT(__restoreDefaults()));
  
  __restoreSettings();
}

QString
SettingsManager::earlyGetLocale() {
  QSettings settings;
  settings.beginGroup("Settings/misc");
  
  QString language = settings.value("language",
                              QLocale::system().name().left(2)).toString();
  
  settings.endGroup();
  return language;
}

QVariant
SettingsManager::get(const QString& _s) {
  QString page = _s.section('.', 0, 0);
  QString variable = _s.section('.', 1);
  
  Q_ASSERT_X(getSingleton().__parsePage(page),
             qPrintable(QString("SettingsManager::get(%1)").arg(page)),
             "No such page");
  return getSingleton().__parsePage(page)->get(variable);
}

void
SettingsManager::updateUi(const QString& _pName) {
  Q_ASSERT_X(getSingleton().__parsePage(_pName),
             qPrintable(QString("SettingsManager::updateUi(%1)").arg(_pName)),
             "No such page");
  
  QSettings s;
  s.beginGroup("Settings");
  getSingleton().__parsePage(_pName)->restoreSettings(s);
  s.endGroup();
}

void
SettingsManager::__restoreSettings() {
  QSettings s;
  s.beginGroup("Settings");
  
  for (AbstractSettingsPage* p: __pages)
    p->restoreSettings(s);
  
  s.endGroup();
  
  emit settingsChanged();
}

AbstractSettingsPage *
SettingsManager::__parsePage(const QString& _s) const {
  for (AbstractSettingsPage* p: __pages)
    if (p->__sm_page_name() == _s)
      return p;
  
  return nullptr;
}

void
SettingsManager::__saveSettings() {
  QSettings s;
  s.beginGroup("Settings");
  
  for (AbstractSettingsPage* p: __pages)
    p->saveSettings(s);
  
  s.endGroup();
  
  emit settingsChanged();
}

void
SettingsManager::__restoreDefaults() {
  QSettings s;
  s.beginGroup("Settings");
  
  s.remove("");
  
  for (AbstractSettingsPage* p: __pages)
    p->restoreSettings(s);
  
  s.endGroup();
}
