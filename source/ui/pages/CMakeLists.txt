set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}")
include (Pages)

set (PAGES "")
set (PAGE_CLASSES "")

foreach (HEADER ${PAGE_HEADERS})
    if (NOT "${HEADER}" MATCHES ".*abstractsettingspage.*")
        file (READ ${HEADER} HEADER_CONTENT)
        string (REGEX
            REPLACE ".*VATSINATOR_DECLARE_PAGE\\(([^\\)]+)\\).*"
            "\\1"
            PAGE_NAME ${HEADER_CONTENT}
        )
        set (PAGES ${PAGES} ${PAGE_NAME})
        
        string (REGEX
            REPLACE ".*class ([^ ]+).*"
            "\\1"
            PAGE_CLASS ${HEADER_CONTENT}
        )
        set (PAGE_CLASSES ${PAGE_CLASSES} ${PAGE_CLASS})
    endif (NOT "${HEADER}" MATCHES ".*abstractsettingspage.*")
endforeach (HEADER ${PAGE_HEADERS})

set (COUNT "0")
set (PAGE_LIST_ENUM "enum PageList {\n")

foreach (PAGE_NAME ${PAGES})
    set (PAGE_LIST_ENUM "${PAGE_LIST_ENUM}  ${PAGE_NAME} = ${COUNT},\n")
    
    math (EXPR COUNT "${COUNT} + 1")
endforeach (PAGE_NAME ${PAGES})

set (PAGE_LIST_ENUM "${PAGE_LIST_ENUM}  __count\n};")

file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/pagelist.h
"#ifndef __PAGELIST_H__
#define __PAGELIST_H__

// generated by cmake
${PAGE_LIST_ENUM}

#endif // __PAGELIST_H__
")


set (PAGE_LIST_CREATION "")
set (COUNT "0")

foreach (CLASS ${PAGE_CLASSES})
    set (PAGE_LIST_CREATION "${PAGE_LIST_CREATION}\n__pages[${COUNT}] = new ${CLASS}();")

    math (EXPR COUNT "${COUNT} + 1")
endforeach (CLASS ${PAGE_CLASSES})

string (REPLACE "\n" " \\\n" PAGE_LIST_CREATION "${PAGE_LIST_CREATION}")
configure_file (${CMAKE_CURRENT_SOURCE_DIR}/pagelistcreation.h.in
    ${CMAKE_CURRENT_BINARY_DIR}/__pagelistcreation.h)

set (PAGE_LIST_HEADERS "")

foreach (HEADER ${PAGE_HEADERS})
    set (PAGE_LIST_HEADERS "${PAGE_LIST_HEADERS}
#include \"ui/pages/${HEADER}\"")
endforeach (HEADER ${PAGE_HEADERS})

file (WRITE ${CMAKE_CURRENT_BINARY_DIR}/__pagelistheaders.h
    "${PAGE_LIST_HEADERS}")
